import React from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { ChartContainer, ChartTooltip, ChartTooltipContent } from '@/components/ui/chart';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Area, AreaChart } from 'recharts';
import { TrendingDown, TrendingUp } from 'lucide-react';

const VulnerabilityTrendsChart = () => {
  const data = [
    { date: 'Jan', critical: 12, high: 25, medium: 45, low: 30, total: 112 },
    { date: 'Feb', critical: 10, high: 22, medium: 40, low: 28, total: 100 },
    { date: 'Mar', critical: 8, high: 20, medium: 38, low: 25, total: 91 },
    { date: 'Apr', critical: 6, high: 18, medium: 35, low: 22, total: 81 },
    { date: 'May', critical: 5, high: 15, medium: 30, low: 20, total: 70 },
    { date: 'Jun', critical: 3, high: 12, medium: 25, low: 18, total: 58 },
  ];

  const chartConfig = {
    critical: {
      label: 'Critical',
      color: 'hsl(var(--critical))',
    },
    high: {
      label: 'High',
      color: 'hsl(var(--high))',
    },
    medium: {
      label: 'Medium',
      color: 'hsl(var(--medium))',
    },
    low: {
      label: 'Low',
      color: 'hsl(var(--low))',
    },
  };

  const currentMonth = data[data.length - 1];
  const previousMonth = data[data.length - 2];
  const percentageChange = ((currentMonth.total - previousMonth.total) / previousMonth.total * 100).toFixed(1);
  const isImproving = currentMonth.total < previousMonth.total;

  return (
    <Card className="gradient-card border-border/50 shadow-card">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle>Vulnerability Trends</CardTitle>
            <CardDescription>Security issues over the last 6 months</CardDescription>
          </div>
          <div className={`flex items-center gap-1 text-sm font-medium ${isImproving ? 'text-success' : 'text-critical'}`}>
            {isImproving ? (
              <>
                <TrendingDown className="h-4 w-4" />
                <span>{Math.abs(Number(percentageChange))}% decrease</span>
              </>
            ) : (
              <>
                <TrendingUp className="h-4 w-4" />
                <span>{percentageChange}% increase</span>
              </>
            )}
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <ChartContainer config={chartConfig} className="h-[300px] w-full">
          <AreaChart data={data}>
            <defs>
              <linearGradient id="criticalGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="hsl(var(--critical))" stopOpacity={0.3} />
                <stop offset="95%" stopColor="hsl(var(--critical))" stopOpacity={0} />
              </linearGradient>
              <linearGradient id="highGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="hsl(var(--high))" stopOpacity={0.3} />
                <stop offset="95%" stopColor="hsl(var(--high))" stopOpacity={0} />
              </linearGradient>
              <linearGradient id="mediumGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="hsl(var(--medium))" stopOpacity={0.3} />
                <stop offset="95%" stopColor="hsl(var(--medium))" stopOpacity={0} />
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="3 3" className="stroke-border/50" />
            <XAxis 
              dataKey="date" 
              className="text-xs"
              tick={{ fill: 'hsl(var(--muted-foreground))' }}
            />
            <YAxis 
              className="text-xs"
              tick={{ fill: 'hsl(var(--muted-foreground))' }}
            />
            <ChartTooltip content={<ChartTooltipContent />} />
            <Area
              type="monotone"
              dataKey="critical"
              stackId="1"
              stroke="hsl(var(--critical))"
              fill="url(#criticalGradient)"
              strokeWidth={2}
            />
            <Area
              type="monotone"
              dataKey="high"
              stackId="1"
              stroke="hsl(var(--high))"
              fill="url(#highGradient)"
              strokeWidth={2}
            />
            <Area
              type="monotone"
              dataKey="medium"
              stackId="1"
              stroke="hsl(var(--medium))"
              fill="url(#mediumGradient)"
              strokeWidth={2}
            />
          </AreaChart>
        </ChartContainer>
        
        {/* Legend */}
        <div className="flex items-center justify-center gap-6 mt-4 text-sm">
          <div className="flex items-center gap-2">
            <div className="h-3 w-3 rounded-full bg-critical" />
            <span className="text-muted-foreground">Critical</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="h-3 w-3 rounded-full bg-high" />
            <span className="text-muted-foreground">High</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="h-3 w-3 rounded-full bg-medium" />
            <span className="text-muted-foreground">Medium</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="h-3 w-3 rounded-full bg-low" />
            <span className="text-muted-foreground">Low</span>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityTrendsChart;
