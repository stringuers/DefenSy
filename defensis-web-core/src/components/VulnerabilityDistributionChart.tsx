import React from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { ChartContainer, ChartTooltip, ChartTooltipContent } from '@/components/ui/chart';
import { PieChart, Pie, Cell, ResponsiveContainer, Legend } from 'recharts';
import { AlertTriangle } from 'lucide-react';

const VulnerabilityDistributionChart = () => {
  const data = [
    { name: 'Critical', value: 3, color: 'hsl(var(--critical))' },
    { name: 'High', value: 12, color: 'hsl(var(--high))' },
    { name: 'Medium', value: 25, color: 'hsl(var(--medium))' },
    { name: 'Low', value: 18, color: 'hsl(var(--low))' },
  ];

  const chartConfig = {
    critical: {
      label: 'Critical',
      color: 'hsl(var(--critical))',
    },
    high: {
      label: 'High',
      color: 'hsl(var(--high))',
    },
    medium: {
      label: 'Medium',
      color: 'hsl(var(--medium))',
    },
    low: {
      label: 'Low',
      color: 'hsl(var(--low))',
    },
  };

  const total = data.reduce((acc, item) => acc + item.value, 0);

  const RADIAN = Math.PI / 180;
  const renderCustomizedLabel = ({
    cx,
    cy,
    midAngle,
    innerRadius,
    outerRadius,
    percent,
  }: any) => {
    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
    const x = cx + radius * Math.cos(-midAngle * RADIAN);
    const y = cy + radius * Math.sin(-midAngle * RADIAN);

    return (
      <text
        x={x}
        y={y}
        fill="white"
        textAnchor={x > cx ? 'start' : 'end'}
        dominantBaseline="central"
        className="text-xs font-medium"
      >
        {`${(percent * 100).toFixed(0)}%`}
      </text>
    );
  };

  return (
    <Card className="gradient-card border-border/50 shadow-card">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <AlertTriangle className="h-5 w-5 text-warning" />
          Vulnerability Distribution
        </CardTitle>
        <CardDescription>Current vulnerabilities by severity level</CardDescription>
      </CardHeader>
      <CardContent>
        <ChartContainer config={chartConfig} className="h-[300px] w-full">
          <PieChart>
            <Pie
              data={data}
              cx="50%"
              cy="50%"
              labelLine={false}
              label={renderCustomizedLabel}
              outerRadius={100}
              fill="#8884d8"
              dataKey="value"
            >
              {data.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={entry.color} />
              ))}
            </Pie>
            <ChartTooltip content={<ChartTooltipContent />} />
          </PieChart>
        </ChartContainer>
        
        {/* Custom Legend */}
        <div className="grid grid-cols-2 gap-4 mt-4">
          {data.map((item, index) => (
            <div key={index} className="flex items-center justify-between p-2 rounded-lg bg-secondary/50">
              <div className="flex items-center gap-2">
                <div 
                  className="h-3 w-3 rounded-full" 
                  style={{ backgroundColor: item.color }}
                />
                <span className="text-sm font-medium">{item.name}</span>
              </div>
              <div className="text-right">
                <div className="text-sm font-bold">{item.value}</div>
                <div className="text-xs text-muted-foreground">
                  {((item.value / total) * 100).toFixed(0)}%
                </div>
              </div>
            </div>
          ))}
        </div>
        
        <div className="mt-4 pt-4 border-t text-center">
          <div className="text-2xl font-bold text-foreground">{total}</div>
          <div className="text-sm text-muted-foreground">Total Vulnerabilities</div>
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityDistributionChart;
